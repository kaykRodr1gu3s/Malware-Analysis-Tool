import requests
import csv
import yaml
import os 

class search_by_hash:
    def __init__(self):
        self.api_key = '1tg6k71d03b16e60wzhe704x4975458dsods59n88fd12f168riqjvkyba4263f1'
        self.url_base =  'https://www.hybrid-analysis.com/api/v2/search/hash'
        self.file_name = 'python-3.11.0-amd64.exe'

    def get_sha256(self,endpoint='https://www.hybrid-analysis.com/api/v2/submit/file'):                         

        headers = {
            'accept': 'application/json',
            'api-key': self.api_key,        }

        files = {
            'tor_enabled_analysis': (None, ''),
            'priority': (None, ''),
            'input_sample_tampering': (None, ''),
            'custom_cmd_line': (None, ''),
            'environment_id': (None, '200'),
            'environment_variable': (None, ''),
            'script_logging': (None, ''),
            'no_hash_lookup': (None, ''),
            'custom_run_time': (None, ''),
            'allow_community_access': (None, ''),
            'custom_date_time': (None, ''),
            'no_share_third_party': (None, ''),
            'submit_name': (None, ''),
            'action_script': (None, ''),
            'network_settings': (None, ''),
            'offline_analysis': (None, ''),
            'file': (self.file_name, open(self.file_name, 'rb'), 'application/x-msdownload'),
            'email': (None, ''),
            'document_password': (None, ''),
            'hybrid_analysis': (None, ''),
            'comment': (None, ''),
            'experimental_anti_evasion': (None, '')}
        
        response = requests.post(endpoint, headers=headers, files=files)
        hash256 = response.json()
        return hash256['sha256'] 

    def hash_search(self) -> dict:
        """
        This function will return a json for be parsed in outher function 
        """    

        header_to_request = {'accept': 'application/json', 
                'api-key': self.api_key,
                'content': 'application/x-www-form-urcoded'}
        
        data = {'hash' : self.get_sha256()}

        req = requests.post(f'{self.url_base}',headers=header_to_request, data=data)
        req = req.json()
        return req


    def parsing_json(self, json_to_parser) -> dict:
        """
        This function will parser the json for create the CSV file
        """

        list_for_dict = []
        content = {}
        list_tactic = []
        list_techniques = []
        attck_id = []
        attck_id_wiki = []
        list_parents = []
        content_dict = {}


        for data in json_to_parser:
            yaml = {}
            yaml['classification tags'] = data['classification_tags']
            yaml['Tags'] = data['tags'] 
            yaml['Submission Id'] = data['submissions']
            yaml['crowdstrike AI'] = data['crowdstrike_ai']
            yaml['environment description'] = data['environment_description']
            yaml['type'] = data['type']
            yaml['type_short'] = data['type_short']
            list_for_dict.append(yaml)
            list_for_dict.append('\n')

        del json_to_parser[0]

        for json_content in json_to_parser:
            list_dict_mitre = json_content['mitre_attcks']

            for dict in list_dict_mitre:
                list_tactic.append(dict['tactic'])
                list_techniques.append(dict['technique'])
                attck_id.append(dict['attck_id'])
                attck_id_wiki.append(dict['attck_id_wiki'])
                list_parents.append(dict['parent'])

        content['tactic'] = list_tactic
        content['technique'] = list_techniques
        content['attck_id'] = attck_id
        content['attck_id_wiki'] = attck_id_wiki
        content['list_parents'] = list_parents
        
        content_dict['csv'] = content
        content_dict['yaml'] = list_for_dict
        
        return content_dict
        
    def creating_file(self, data_to_save):
        """
        This function will create the CSV file 
        """
        json_content = data_to_save
        csv_data = json_content['csv']

        head = ['Tactic', 'Technique', 'Att&ck ID', 'Att&ck ID link', 'Parents']
        current = os.getcwd() + '\\HybridAnalysis\\Files'
        os.chdir(current)
        print(os.getcwd())
        with open(f'{os.getcwd()}\\{self.file_name}.csv', 'w', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(head)
            
            for key, value in enumerate(csv_data['tactic']):
                
                data_csv = csv_data['tactic'][key],csv_data['technique'][key],csv_data['attck_id'][key],csv_data['attck_id_wiki'][key],csv_data['list_parents'][key]
                writer.writerow(data_csv)
        
# 
        with open(f'{self.file_name}.yaml', 'w', newline='') as f:
            for yaml_dict in json_content['yaml']:
                yaml.dump(yaml_dict, f, default_flow_style=False)
        

    def main(self):
        hash_search = self.hash_search()
        parsing_json = hash_search
        a = self.parsing_json(parsing_json)
        self.creating_file(a)

hybrid_analysis = search_by_hash()
hybrid_analysis.main()

